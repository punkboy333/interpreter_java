DECLARE
	from fr = (a & b) /*formula_tipus_dec_ertekkel*/
	list lss /*lista_tipus_dec_uresen*/
	VAR a = false /*valtozo_dec_ertekkel*/
	VAR b = false
	VAR c = true
	from frr = (a | c)
	list ls
END DECLARE
METHOD sajatmetod(list lista) /*method_kinezete*/
	DECLARE
		list ls
	END DECLARE
	MAIN
	writeln()
	write("Method")
	writeln()
	return list ls
	END MAIN
END METHOD
MAIN
	write("Ird_be_b-t") /*Kiir*/
	writeln()  /*sortores*/
	read(b) /*beolvasa_b_erteket*/
	write (a) /*kiir_a-t*/
	writeln()
	writeln()
	get(fr)->a  /*kiertekel_fr_es_eredmeny_a-ban*/
	get(frr) -> c 
	set((-a>b)) -> fr   /*a_kovetkezo_formulat_beteszi_b-be*/
	write(fr) 
	write(a)
	get(fr) -> a
	writeln()
	write("Ertek_")
	write(a)
	writeln()
	write (c)
	write (a)
	push(fr , lss)  /*fr_-t_beteszi_lss-be*/
	push(fr , lss)
	set((a&b)) -> fr 
	pop(lss) -> frr /*kiveszi_lss_legutcso_elemet_es_beteszi_frr-be*/
	writeln()
	write(frr)
	for(vs in lss)  /*forciklus*/
		MAIN 
			writeln()
			write(vs)
			writeln()
		END MAIN 
	end
	set((a|(b|-c))) -> fr
	truthtable(fr) /*trutable_kiiratasa*/
	isTautology(fr) -> a
	write(a)
	writeln()
	isEllentmondas(fr) -> a
	write(a)
	writeln()
	isKielegitheto(fr) ->a
	write(a)
	writeln()
	if((a&-a)) then  /*ifagaztatas*/
		MAIN 
			write("Igaz") 
		END MAIN 
			else
		MAIN 
			write("Hamis") 
		END MAIN
	end
	method sajatmetod(lss) -> lss /*method_hivas*/
END MAIN

